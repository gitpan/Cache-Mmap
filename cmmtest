#!/opt/bin/perl

# ctest: test of mmapped cache

use Cache::Mmap;
use Data::Dumper;
use strict;

# These will be read from the file if it already exists
my %options=(
  buckets => 1,
  bucketsize => 200,
  strings => 1,
  expiry => 30,
);


my $filename='.cache';
$filename=shift if @ARGV;
my $cache=Cache::Mmap->new($filename,\%options)
  or die;

print "Strings: ",$cache->strings,"\n";
# Read user commands from STDIN
$|=1;
print "cmmtest: ";
while(<>){
  my($cmd,$key,$value)=/^([><0?-])\s+(\S+)(?:\s+(.*))?\s+$/
    or do{ warn "Invalid command\n"; next; };
  
  if($cmd eq '<'){
    # Read
    if($value ne ''){
      warn "Unexpected stuff after key\n";
      next;
    }
    my($found,$val)=$cache->read($key);
    if(!$found){
      print "No such value\n";
    }elsif(defined $val){
      $val=Dumper($val) unless $cache->strings;
      print "=> $val\n";
    }else{
      print "Undefined value\n";
    }
  }elsif($cmd eq '>'){
    # Write
    if($cache->write($key,$cache->strings ? $value : \$value)){
      print "OK\n";
    }else{
      warn "Can't write value\n";
    }
  }elsif($cmd eq '-'){
    # delete
    my($found,$val)=$cache->delete($key);
    if(!$found){
      print "No such value\n";
    }elsif(defined $val){
      $val=Dumper($val) unless $cache->strings;
      print "=  ok[$val]\n";
    }else{
      warn "Undefined value\n";
    }
#  }elsif($cmd eq '0'){
#    # clear
#    %cache=();
#    print "=  ok\n";
  }elsif($cmd eq '?'){
    # exists
    my($found,$val)=$cache->read($key);
    if($found){
      print "=  yes\n";
    }else{
      print "=  no\n";
    }
  }else{
    warn "Unknown command: $cmd\n";
  }
}continue{
  print "cmmtest: ";
}

